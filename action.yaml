name: "Build and push to rubin-cr.lsst.org"
description: >
  This composite action builds a Docker image, tags it with the current git
  branch/tag ref, and pushes it to rubin-cr.lsst.org.
inputs:
  username:
    description: "The username to use for authentication to the container registry."
    required: true
  password:
    description: "The token to usefor authentication to the container registry."
    required: true
  image:
    description: "The name of the Docker image to build."
    required: true
  dockerfile:
    description: "The name of the Dockerfile to build."
    required: false
    default: "Dockerfile"
  context:
    description: "The build context to use."
    required: false
    default: "."
  push:
    description: "Whether to push the image to rubin-cr.lsst.org."
    required: false
    default: "true"
  cache-from:
    description: "List of external cache sources for buildx."
    required: false
    default: "type=gha"
  cache-to:
    description: "List of cache export destinations for buildx."
    required: false
    default: "type=gha,mode=max"
outputs:
  tag:
    description: "The tag of the Docker image that was built."
    value: ${{ steps.tag.outputs.tag }}
  fully_qualified_image_digest:
    description: "A complete, unique, immutable identifier for the built image, including the registry and digest"
    value: "rubin-cr.lsst.org/${{ inputs.image }}@${{ steps.build.outputs.digest }}"

runs:
  using: "composite"
  steps:

    - name: Define the tag
      id: tag
      shell: bash
      run: echo "tag=`bash ${{ github.action_path  }}/docker-tag.sh`" >> ${GITHUB_OUTPUT}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Rubin Container Registry
      uses: docker/login-action@v3
      if: fromJSON(inputs.push) == true
      with:
        registry: rubin-cr.lsst.org
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v6
      with:
        context: "${{ inputs.context }}"
        file: "${{ inputs.dockerfile }}"
        push: ${{ fromJSON(inputs.push) == true }}
        tags: |
          rubin-cr.lsst.org/${{ inputs.image }}:${{ steps.tag.outputs.tag }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
